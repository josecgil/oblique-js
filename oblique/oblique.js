// Generated by CoffeeScript 1.3.3
(function() {

  this.ObliqueError = (function() {

    function ObliqueError(message) {
      this.message = message;
      if (this === window) {
        return new ObliqueError(this.message);
      }
    }

    return ObliqueError;

  })();

  this.Oblique = (function() {

    function Oblique() {
      if (this === window) {
        return new Oblique();
      }
      if (Oblique._singletonInstance) {
        return Oblique._singletonInstance;
      }
      Oblique._singletonInstance = this;
      this._intervalTimeInMs = Oblique.DEFAULT_INTERVAL_MS;
      this._lastIntervalId = undefined;
      this._directiveConstructors = [];
      this._listenToDirectivesInDOM();
    }

    Oblique.DEFAULT_INTERVAL_MS = 500;

    Oblique.prototype._clearLastInterval = function() {
      if (this._lastIntervalId !== undefined) {
        return clearInterval(this._lastIntervalId);
      }
    };

    Oblique.prototype._applyDirectivesOnDocumentReady = function() {
      var _this = this;
      return $(document).ready(function() {
        return _this._applyDirectivesInDOM();
      });
    };

    Oblique.prototype._setNewInterval = function() {
      var _this = this;
      return this._lastIntervalId = setInterval(function() {
        return _this._applyDirectivesInDOM();
      }, this._intervalTimeInMs);
    };

    Oblique.prototype._listenToDirectivesInDOM = function() {
      this._clearLastInterval();
      this._applyDirectivesOnDocumentReady();
      return this._setNewInterval();
    };

    Oblique.prototype._elementHasDirectiveApplied = function(DOMElement, directive) {
      return $(DOMElement).data(directive.CSS_EXPRESSION);
    };

    Oblique.prototype._applyDirectiveOnElement = function(directiveConstructorFn, DOMElement) {
      $(DOMElement).data(directiveConstructorFn.CSS_EXPRESSION, true);
      new directiveConstructorFn(DOMElement);
    };

    Oblique.prototype._applyDirectivesInDOM = function() {
      var rootElement,
        _this = this;
      rootElement = document.getElementsByTagName("body")[0];
      return bqDOMDocument.traverse(rootElement, function(DOMElement) {
        var directiveConstructorFn, i;
        if (DOMElement.nodeType !== bqDOMDocument.NODE_TYPE_ELEMENT) {
          return true;
        }
        i = 0;
        while (i < _this._directiveConstructors.length) {
          directiveConstructorFn = _this._directiveConstructors[i];
          if ($(DOMElement).is(directiveConstructorFn.CSS_EXPRESSION)) {
            if (_this._elementHasDirectiveApplied(DOMElement, directiveConstructorFn)) {
              return true;
            }
            _this._applyDirectiveOnElement(directiveConstructorFn, DOMElement);
          }
          i++;
        }
      });
    };

    Oblique.prototype._addDirective = function(directiveConstructorFn) {
      return this._directiveConstructors.push(directiveConstructorFn);
    };

    Oblique.prototype._isAFunction = function(memberToTest) {
      return typeof memberToTest === "function";
    };

    Oblique.prototype._containsDirective = function(directiveConstructorFnToCheck) {
      var containsDirective;
      containsDirective = false;
      $.each(this._directiveConstructors, function(i, directiveConstructorFn) {
        if (directiveConstructorFn.CSS_EXPRESSION === directiveConstructorFnToCheck.CSS_EXPRESSION) {
          containsDirective = true;
          return false;
        }
      });
      return containsDirective;
    };

    Oblique.prototype._throwErrorIfDirectiveIsNotValid = function(directiveConstructorFn) {
      if (!this._isAFunction(directiveConstructorFn)) {
        throw ObliqueError("registerDirective must be called with a Directive 'Constructor/Class'");
      }
      if (!directiveConstructorFn.CSS_EXPRESSION) {
        throw ObliqueError("directive must has an static CSS_EXPRESSION property");
      }
      if (this._containsDirective(directiveConstructorFn)) {
        throw ObliqueError("Directive '" + directiveConstructorFn.CSS_EXPRESSION + "' already registered");
      }
    };

    Oblique.prototype.getIntervalTimeInMs = function() {
      return this._intervalTimeInMs;
    };

    Oblique.prototype.setIntervalTimeInMs = function(newIntervalTimeInMs) {
      this._intervalTimeInMs = newIntervalTimeInMs;
      this._listenToDirectivesInDOM();
    };

    Oblique.prototype.registerDirective = function(directiveConstructorFn) {
      this._throwErrorIfDirectiveIsNotValid(directiveConstructorFn);
      this._addDirective(directiveConstructorFn);
    };

    return Oblique;

  })();

}).call(this);
