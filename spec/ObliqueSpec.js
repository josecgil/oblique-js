// Generated by CoffeeScript 1.7.1
(function () {
    describe("Oblique", function () {
        beforeEach(function (done) {
            Oblique().destroyInstance();
            $("#fixture").html("");
            return done();
        });
        afterEach(function () {
            return Oblique().destroyInstance();
        });
        it("On creation it has a default interval time", function () {
            Oblique().destroyInstance();
            return expect(Oblique().getIntervalTimeInMs()).toBe(Oblique.DEFAULT_INTERVAL_MS);
        });
        it("We can change default interval time", function () {
            var newIntervaltimeMs, oblique;
            newIntervaltimeMs = 10000;
            oblique = Oblique();
            oblique.setIntervalTimeInMs(newIntervaltimeMs);
            return expect(oblique.getIntervalTimeInMs()).toBe(newIntervaltimeMs);
        });
        it("We can't change default interval time to invalid value", function () {
            return expect(function () {
                return Oblique().setIntervalTimeInMs(-1);
            }).toThrow(new ObliqueError("IntervalTime must be a positive number"));
        });
        it("If a register a Directive if calls it constructor when expression is in DOM", function (done) {
            var TestDirective;
            TestDirective = (function () {
                function TestDirective(DOMElement) {
                    Oblique().destroyInstance();
                    done();
                }

                TestDirective.CSS_EXPRESSION = "*[data-test]";

                return TestDirective;

            })();
            Oblique().registerDirective(TestDirective);
            Oblique().setIntervalTimeInMs(10);
            return $("#fixture").html("<div data-test></div>");
        });
        it("If a register a Directive if calls it constructor with the correct DOM element", function (done) {
            var TestDirective;
            TestDirective = (function () {
                function TestDirective(DOMElement) {
                    expect($(DOMElement).is("test[data-test]")).toBeTruthy();
                    Oblique().destroyInstance();
                    done();
                }

                TestDirective.CSS_EXPRESSION = "*[data-test]";

                return TestDirective;

            })();
            Oblique().registerDirective(TestDirective);
            return $("#fixture").html("<test data-test></test>");
        });
        it("If a register a Directive without CSS_EXPRESSION it throws an Error", function () {
            var TestDirective;
            TestDirective = (function () {
                function TestDirective() {
                }

                return TestDirective;

            })();
            return expect(function () {
                return Oblique().registerDirective(TestDirective);
            }).toThrow(new ObliqueError("directive must has an static CSS_EXPRESSION property"));
        });
        return it("If a register an object that no is a Directive it throws an Error", function () {
            return expect(function () {
                return Oblique().registerDirective({});
            }).toThrow(new ObliqueError("registerDirective must be called with a Directive 'Constructor/Class'"));
        });
    });

}).call(this);
