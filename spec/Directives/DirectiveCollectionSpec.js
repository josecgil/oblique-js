// Generated by CoffeeScript 1.10.0
(function() {
  describe("DirectiveCollection", function() {
    var Directive, DirectiveCollection;
    Directive = ObliqueNS.Directive;
    DirectiveCollection = ObliqueNS.DirectiveCollection;
    it("must be empty when created", function() {
      var directives;
      directives = new DirectiveCollection();
      return expect(directives.count()).toBe(0);
    });
    it("must be count=1 when added 1 Directive", function() {
      var SampleDirective, directives;
      SampleDirective = (function() {
        function SampleDirective() {}

        return SampleDirective;

      })();
      directives = new DirectiveCollection();
      directives.add(new Directive("SampleDirective", SampleDirective));
      return expect(directives.count()).toBe(1);
    });
    it("must iterate on each directive added", function() {
      var SampleDirective, SampleDirective2, directives;
      SampleDirective = (function() {
        function SampleDirective() {}

        return SampleDirective;

      })();
      SampleDirective2 = (function() {
        function SampleDirective2() {}

        return SampleDirective2;

      })();
      directives = new DirectiveCollection();
      directives.add(new Directive("SampleDirective", SampleDirective));
      directives.add(new Directive("SampleDirective2", SampleDirective2));
      expect(directives.count()).toBe(2);
      return directives.each(function(directive, index) {
        if (index === 0) {
          expect(directive.name).toBe("SampleDirective");
          expect(directive.callback).toBe(SampleDirective);
        }
        if (index === 1) {
          expect(directive.name).toBe("SampleDirective2");
          return expect(directive.callback).toBe(SampleDirective2);
        }
      });
    });
    it("must return a directive by name", function() {
      var SampleDirective3, SampleDirective4, directive, directives;
      SampleDirective3 = (function() {
        function SampleDirective3() {}

        return SampleDirective3;

      })();
      SampleDirective4 = (function() {
        function SampleDirective4() {}

        return SampleDirective4;

      })();
      directives = new DirectiveCollection();
      directives.add(new Directive("SampleDirective3", SampleDirective3));
      directives.add(new Directive("SampleDirective4", SampleDirective4));
      directive = directives.findByName("SampleDirective3");
      expect(directive.name).toBe("SampleDirective3");
      expect(directive.callback).toBe(SampleDirective3);
      return expect(directive.isGlobal).toBeFalsy();
    });
    it("must return a directive by name case insensitive", function() {
      var SampleDirective5, directive, directives;
      SampleDirective5 = (function() {
        function SampleDirective5() {}

        return SampleDirective5;

      })();
      directives = new DirectiveCollection();
      directives.add(new Directive("SampleDirective5", SampleDirective5));
      directive = directives.findByName("sampledirective5");
      expect(directive.name).toBe("SampleDirective5");
      expect(directive.callback).toBe(SampleDirective5);
      return expect(directive.isGlobal).toBeFalsy();
    });
    return it("must return a directive by name trimmed", function() {
      var SampleDirective6, directive, directives;
      SampleDirective6 = (function() {
        function SampleDirective6() {}

        return SampleDirective6;

      })();
      directives = new DirectiveCollection();
      directives.add(new Directive("SampleDirective6", SampleDirective6));
      directive = directives.findByName("  SampleDirective6   ");
      expect(directive.name).toBe("SampleDirective6");
      expect(directive.callback).toBe(SampleDirective6);
      return expect(directive.isGlobal).toBeFalsy();
    });
  });

}).call(this);
