// Generated by CoffeeScript 1.8.0
(function() {
  var DataModelVariable, DirectiveProcessor;

  this.ObliqueNS = this.ObliqueNS || {};

  DataModelVariable = ObliqueNS.DataModelVariable;

  DirectiveProcessor = (function() {
    function DirectiveProcessor() {
      if (this === window) {
        return new DirectiveProcessor();
      }
      if (DirectiveProcessor._singletonInstance) {
        return DirectiveProcessor._singletonInstance;
      }
      DirectiveProcessor._singletonInstance = this;
      this._throwErrorIfJQueryIsntLoaded();
      this._directiveCollection = new ObliqueNS.DirectiveCollection();
      this._timedDOMObserver = this._createTimedDOMObserver(DirectiveProcessor.DEFAULT_INTERVAL_MS);
      this._memory = new ObliqueNS.Memory();
      jQuery(document).ready((function(_this) {
        return function() {
          _this._applyDirectivesInDOM();
          return _this._timedDOMObserver.observe();
        };
      })(this));
    }

    DirectiveProcessor.DEFAULT_INTERVAL_MS = 500;

    DirectiveProcessor.prototype._throwErrorIfJQueryIsntLoaded = function() {
      if (!window.jQuery) {
        throw new Error("DirectiveProcessor needs jQuery to work");
      }
    };

    DirectiveProcessor.prototype._createTimedDOMObserver = function(intervalInMs) {
      var observer;
      observer = new ObliqueNS.TimedDOMObserver(intervalInMs);
      observer.onChange((function(_this) {
        return function() {
          return _this._applyDirectivesInDOM();
        };
      })(this));
      return observer;
    };

    DirectiveProcessor._isApplyingDirectivesInDOM = false;

    DirectiveProcessor.prototype._applyDirectivesInDOM = function() {
      if (this._isApplyingDirectivesInDOM) {
        return;
      }
      this._isApplyingDirectivesInDOM = true;
      try {
        return $("*[data-ob-directive]").each((function(_this) {
          return function(index, DOMElement) {
            var directiveAttrValue, obElement;
            obElement = new ObliqueNS.Element(DOMElement);
            directiveAttrValue = obElement.getAttributeValue("data-ob-directive");
            if (directiveAttrValue) {
              return _this._processDirectiveElement(obElement, directiveAttrValue);
            }
          };
        })(this));

        /*
        body=document.getElementsByTagName("body")[0]
        rootObElement=new ObliqueNS.Element body
        rootObElement.eachDescendant(
          (DOMElement)=>
            obElement=new ObliqueNS.Element DOMElement
            directiveAttrValue=obElement.getAttributeValue "data-ob-directive"
            @_processDirectiveElement(obElement, directiveAttrValue) if directiveAttrValue
        )
         */
      } finally {
        this._isApplyingDirectivesInDOM = false;
      }
    };

    DirectiveProcessor.prototype._processDirectiveElement = function(obElement, directiveAttrValue) {
      var directive, directiveData, directiveName, _i, _len, _ref, _results;
      _ref = directiveAttrValue.split(",");
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        directiveName = _ref[_i];
        directiveName = directiveName.trim();
        if (obElement.hasFlag(directiveName)) {
          continue;
        }
        directive = this._directiveCollection.getDirectiveByName(directiveName);
        if (!directive) {
          throw new ObliqueNS.Error("There is no " + directiveName + " directive registered");
        }
        obElement.setFlag(directiveName);
        directiveData = {
          domElement: obElement.getDOMElement(),
          jQueryElement: obElement.getjQueryElement(),
          model: this._getDirectiveModel(obElement),
          params: this._getParams(obElement)
        };
        _results.push(new directive(directiveData));
      }
      return _results;
    };

    DirectiveProcessor.prototype._getParams = function(obElement) {
      var dataParamsExpr, e;
      dataParamsExpr = obElement.getAttributeValue("data-ob-params");
      if (!dataParamsExpr) {
        return void 0;
      }
      try {
        return jQuery.parseJSON(dataParamsExpr);
      } catch (_error) {
        e = _error;
        return this._throwError("" + (obElement.getHtml()) + ": data-ob-params parse error: " + e.message);
      }
    };

    DirectiveProcessor.prototype._getDirectiveModel = function(___obElement) {

      /*
        WARNING: all local variable names in this method
        must be prefixed with three undercores ("___")
        in order to not be in conflict with dynamic
        local variables created by
          eval(@_memory.localVarsScript())
       */
      var Model, e, ___dataModelExpr, ___dataModelVariable, ___directiveModel, ___variableName, ___variableValue;
      Model = Oblique().getModel();
      ___dataModelExpr = ___obElement.getAttributeValue("data-ob-model");
      if (___dataModelExpr === void 0) {
        return void 0;
      }
      try {
        eval(this._memory.localVarsScript());
        ___directiveModel = eval(___dataModelExpr);
        ___dataModelVariable = new DataModelVariable(___dataModelExpr);
        if (___dataModelVariable.isSet) {
          ___variableName = ___dataModelVariable.name;
          ___variableValue = eval(___variableName);
          this._memory.setVar(___variableName, ___variableValue);
          ___directiveModel = ___variableValue;
        }
        if (!___directiveModel) {
          this._throwError("" + (___obElement.getHtml()) + ": data-ob-model expression is undefined");
        }
        return ___directiveModel;
      } catch (_error) {
        e = _error;
        return this._throwError("" + (___obElement.getHtml()) + ": data-ob-model expression error: " + e.message);
      }
    };

    DirectiveProcessor.prototype._throwError = function(errorMessage) {
      return Oblique().triggerOnError(new ObliqueNS.Error(errorMessage));
    };

    DirectiveProcessor.prototype.getIntervalTimeInMs = function() {
      return this._timedDOMObserver.getIntervalInMs();
    };

    DirectiveProcessor.prototype.setIntervalTimeInMs = function(newIntervalTimeInMs) {
      if (newIntervalTimeInMs <= 0) {
        throw new ObliqueNS.Error("IntervalTime must be a positive number");
      }
      this._timedDOMObserver.destroy();
      this._timedDOMObserver = this._createTimedDOMObserver(newIntervalTimeInMs);
      return this._timedDOMObserver.observe();
    };

    DirectiveProcessor.prototype.registerDirective = function(directiveName, directiveConstructorFn) {
      return this._directiveCollection.add(directiveName, directiveConstructorFn);
    };

    DirectiveProcessor.prototype.destroy = function() {
      this._timedDOMObserver.destroy();
      return DirectiveProcessor._singletonInstance = void 0;
    };

    return DirectiveProcessor;

  })();

  ObliqueNS.DirectiveProcessor = DirectiveProcessor;

  this.Oblique = DirectiveProcessor;

}).call(this);
