// Generated by CoffeeScript 1.8.0
(function() {
  var Oblique;

  this.ObliqueNS = this.ObliqueNS || {};

  Oblique = (function() {
    function Oblique() {
      if (this === window) {
        return new Oblique();
      }
      if (Oblique._singletonInstance) {
        return Oblique._singletonInstance;
      }
      Oblique._singletonInstance = this;
      this.domProcessor = new ObliqueNS.DOMProcessor();
      this.templateFactory = new ObliqueNS.TemplateFactory();
      this._onErrorCallbacks = [];
    }

    Oblique.DEFAULT_INTERVAL_MS = 500;

    Oblique.prototype.getIntervalTimeInMs = function() {
      return this.domProcessor.getIntervalTimeInMs();
    };

    Oblique.prototype.setIntervalTimeInMs = function(newIntervalTimeInMs) {
      return this.domProcessor.setIntervalTimeInMs(newIntervalTimeInMs);
    };

    Oblique.prototype.registerDirective = function(directiveName, directiveConstructorFn) {
      return this.domProcessor.registerDirective(directiveName, directiveConstructorFn);
    };

    Oblique.prototype.registerDirectiveAsGlobal = function(directiveName, directiveConstructorFn) {
      return this.domProcessor.registerDirectiveAsGlobal(directiveName, directiveConstructorFn);
    };

    Oblique.prototype.destroy = function() {
      var e;
      this.domProcessor.destroy();
      try {
        return delete Oblique._singletonInstance;
      } catch (_error) {
        e = _error;
        return Oblique._singletonInstance = void 0;
      }
    };

    Oblique.prototype.setModel = function(_model) {
      this._model = _model;
    };

    Oblique.prototype.getModel = function() {
      return this._model;
    };

    Oblique.prototype.hasModel = function() {
      if (this._model) {
        return true;
      }
      return false;
    };

    Oblique.prototype.renderHTML = function(url, model) {
      var template;
      if (Handlebars === void 0) {
        throw new ObliqueNS.Error("Oblique().renderHtml(): needs handlebarsjs loaded to render templates");
      }
      template = this.templateFactory.createFromUrl(url);
      return template.renderHTML(model);
    };

    Oblique.prototype.onError = function(onErrorCallback) {
      return this._onErrorCallbacks.push(onErrorCallback);
    };

    Oblique.prototype.triggerOnError = function(error) {
      var callback, _i, _len, _ref, _results;
      _ref = this._onErrorCallbacks;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        callback = _ref[_i];
        _results.push(callback(error));
      }
      return _results;
    };

    Oblique.prototype.getHashParams = function() {
      return new ObliqueNS.ParamCollection(window.location.hash);
    };

    Oblique.prototype.setHashParams = function(paramCollection) {
      var hash, location, newUrl, urlWithoutHash;
      hash = paramCollection.getLocationHash();
      location = window.location;
      urlWithoutHash = location.protocol + "//" + location.host + location.pathname + location.search;
      newUrl = urlWithoutHash + hash;
      return window.location.replace(newUrl);
    };

    return Oblique;

  })();

  ObliqueNS.Oblique = Oblique;

  this.Oblique = Oblique;

}).call(this);
