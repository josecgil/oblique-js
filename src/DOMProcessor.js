// Generated by CoffeeScript 1.8.0
(function() {
  var DOMProcessor, DataModelVariable;

  this.ObliqueNS = this.ObliqueNS || {};

  DataModelVariable = ObliqueNS.DataModelVariable;

  DOMProcessor = (function() {
    function DOMProcessor() {
      if (this === window) {
        return new DOMProcessor();
      }
      if (DOMProcessor._singletonInstance) {
        return DOMProcessor._singletonInstance;
      }
      DOMProcessor._singletonInstance = this;
      this._throwErrorIfJQueryIsntLoaded();
      this._directiveCollection = new ObliqueNS.CallbackCollection();
      this._controllerCollection = new ObliqueNS.CallbackCollection();
      this._directiveInstancesData = [];
      this._controllerInstancesData = [];
      this._timedDOMObserver = this._createTimedDOMObserver(DOMProcessor.DEFAULT_INTERVAL_MS);
      this._memory = new ObliqueNS.Memory();
      jQuery(document).ready((function(_this) {
        return function() {
          _this._applyObliqueElementsInDOM();
          _this._timedDOMObserver.observe();
          return _this._listenToHashRouteChanges();
        };
      })(this));
    }

    DOMProcessor.DEFAULT_INTERVAL_MS = 500;

    DOMProcessor.prototype._listenToHashRouteChanges = function() {
      return $(window).on("hashchange", (function(_this) {
        return function() {
          var controllerData, controllerInstanceData, _i, _len, _ref, _results;
          _ref = _this._controllerInstancesData;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            controllerInstanceData = _ref[_i];
            controllerData = _this._createControllerData(controllerInstanceData.domElement, controllerInstanceData.jQueryElement);
            _results.push(controllerInstanceData.instance.onHashChange(controllerData));
          }
          return _results;
        };
      })(this));
    };

    DOMProcessor.prototype._ignoreHashRouteChanges = function() {
      return $(window).off("hashchange");
    };

    DOMProcessor.prototype._throwErrorIfJQueryIsntLoaded = function() {
      if (!window.jQuery) {
        throw new Error("DOMProcessor needs jQuery to work");
      }
    };

    DOMProcessor.prototype._createTimedDOMObserver = function(intervalInMs) {
      var observer;
      observer = new ObliqueNS.TimedDOMObserver(intervalInMs);
      observer.onChange((function(_this) {
        return function() {
          return _this._applyObliqueElementsInDOM();
        };
      })(this));
      return observer;
    };

    DOMProcessor._isApplyingObliqueElementsInDOM = false;

    DOMProcessor.prototype._applyObliqueElementsInDOM = function() {
      var e;
      if (this._isApplyingObliqueElementsInDOM) {
        return;
      }
      this._isApplyingObliqueElementsInDOM = true;
      try {
        $("*[data-ob-controller]").each((function(_this) {
          return function(index, DOMElement) {
            var controllerAttrValue, obElement;
            obElement = new ObliqueNS.Element(DOMElement);
            controllerAttrValue = obElement.getAttributeValue("data-ob-controller");
            if (controllerAttrValue) {
              return _this._processControllerElement(obElement, controllerAttrValue);
            }
          };
        })(this));
        return $("*[data-ob-directive]").each((function(_this) {
          return function(index, DOMElement) {
            var directiveAttrValue, obElement;
            obElement = new ObliqueNS.Element(DOMElement);
            directiveAttrValue = obElement.getAttributeValue("data-ob-directive");
            if (directiveAttrValue) {
              return _this._processDirectiveElement(obElement, directiveAttrValue);
            }
          };
        })(this));
      } catch (_error) {
        e = _error;
        return this._throwError("Error _applyObliqueElementsInDOM() : " + e.message);
      } finally {
        this._isApplyingObliqueElementsInDOM = false;
      }
    };

    DOMProcessor.prototype._processDirectiveElement = function(obElement, directiveAttrValue) {
      var callbackHashChange, directive, directiveData, directiveInstanceData, directiveName, domElement, jQueryElement, model, params, _i, _len, _ref, _results;
      _ref = directiveAttrValue.split(",");
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        directiveName = _ref[_i];
        directiveName = directiveName.trim();
        if (obElement.hasFlag(directiveName)) {
          continue;
        }
        directive = this._directiveCollection.getCallbackByName(directiveName);
        if (!directive) {
          throw new ObliqueNS.Error("There is no " + directiveName + " directive registered");
        }
        obElement.setFlag(directiveName);
        domElement = obElement.getDOMElement();
        jQueryElement = obElement.getjQueryElement();
        model = this._getDirectiveModel(obElement);
        params = this._getParams(obElement);
        directiveData = this._createDirectiveData(domElement, jQueryElement, model, params);
        directiveInstanceData = {
          instance: new directive(directiveData),
          domElement: domElement,
          jQueryElement: jQueryElement,
          model: model,
          params: params
        };
        this._directiveInstancesData.push(directiveInstanceData);
        callbackHashChange = directiveInstanceData.instance.onHashChange;
        if (callbackHashChange) {
          _results.push(callbackHashChange(this._createDirectiveData(domElement, jQueryElement, model, params)));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    DOMProcessor.prototype._processControllerElement = function(obElement, controllerAttrValue) {
      var callbackHashChange, controllerConstructorFn, controllerData, controllerInstanceData, controllerName, domElement, jQueryElement, _i, _len, _ref, _results;
      _ref = controllerAttrValue.split(",");
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        controllerName = _ref[_i];
        controllerName = controllerName.trim();
        if (obElement.hasFlag(controllerName)) {
          continue;
        }
        controllerConstructorFn = this._controllerCollection.getCallbackByName(controllerName);
        if (!controllerConstructorFn) {
          throw new ObliqueNS.Error("There is no " + controllerName + " controller registered");
        }
        obElement.setFlag(controllerName);
        domElement = obElement.getDOMElement();
        jQueryElement = obElement.getjQueryElement();
        controllerData = this._createControllerData(domElement, jQueryElement);
        controllerInstanceData = {
          instance: new controllerConstructorFn(controllerData),
          domElement: domElement,
          jQueryElement: jQueryElement
        };
        this._controllerInstancesData.push(controllerInstanceData);
        callbackHashChange = controllerInstanceData.instance.onHashChange;
        if (callbackHashChange) {
          _results.push(callbackHashChange(this._createControllerData(domElement, jQueryElement)));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    DOMProcessor.prototype._createControllerData = function(domElement, jQueryElement) {
      var controllerData;
      controllerData = {
        domElement: domElement,
        jQueryElement: jQueryElement,
        hashParams: Oblique().getHashParams()
      };
      return controllerData;
    };

    DOMProcessor.prototype._createDirectiveData = function(domElement, jQueryElement, model, params) {
      var directiveData;
      directiveData = {
        domElement: domElement,
        jQueryElement: jQueryElement,
        model: model,
        params: params,
        hashParams: Oblique().getHashParams()
      };
      return directiveData;
    };

    DOMProcessor.prototype._getParams = function(obElement) {
      var dataParamsExpr, e;
      dataParamsExpr = obElement.getAttributeValue("data-ob-params");
      if (!dataParamsExpr) {
        return void 0;
      }
      try {
        return jQuery.parseJSON(dataParamsExpr);
      } catch (_error) {
        e = _error;
        return this._throwError("" + (obElement.getHtml()) + ": data-ob-params parse error: " + e.message);
      }
    };

    DOMProcessor.prototype._getDirectiveModel = function(___obElement) {

      /*
        WARNING: all local variable names in this method
        must be prefixed with three undercores ("___")
        in order to not be in conflict with dynamic
        local variables created by
          eval(@_memory.localVarsScript())
       */
      var Model, e, ___dataModelExpr, ___dataModelVariable, ___directiveModel, ___variableName, ___variableValue;
      Model = Oblique().getModel();
      ___dataModelExpr = ___obElement.getAttributeValue("data-ob-model");
      if (___dataModelExpr === void 0) {
        return void 0;
      }
      try {
        eval(this._memory.localVarsScript());
        ___directiveModel = eval(___dataModelExpr);
        ___dataModelVariable = new DataModelVariable(___dataModelExpr);
        if (___dataModelVariable.isSet) {
          ___variableName = ___dataModelVariable.name;
          ___variableValue = eval(___variableName);
          this._memory.setVar(___variableName, ___variableValue);
          ___directiveModel = ___variableValue;
        }
        if (!___directiveModel) {
          this._throwError("" + (___obElement.getHtml()) + ": data-ob-model expression is undefined");
        }
        return ___directiveModel;
      } catch (_error) {
        e = _error;
        return this._throwError("" + (___obElement.getHtml()) + ": data-ob-model expression error: " + e.message);
      }
    };

    DOMProcessor.prototype._throwError = function(errorMessage) {
      return Oblique().triggerOnError(new ObliqueNS.Error(errorMessage));
    };

    DOMProcessor.prototype.getIntervalTimeInMs = function() {
      return this._timedDOMObserver.getIntervalInMs();
    };

    DOMProcessor.prototype.setIntervalTimeInMs = function(newIntervalTimeInMs) {
      if (newIntervalTimeInMs <= 0) {
        throw new ObliqueNS.Error("IntervalTime must be a positive number");
      }
      this._timedDOMObserver.destroy();
      this._timedDOMObserver = this._createTimedDOMObserver(newIntervalTimeInMs);
      return this._timedDOMObserver.observe();
    };

    DOMProcessor.prototype.registerDirective = function(directiveName, directiveConstructorFn) {
      return this._directiveCollection.add(directiveName, directiveConstructorFn);
    };

    DOMProcessor.prototype.registerController = function(controllerName, controllerConstructorFn) {
      return this._controllerCollection.add(controllerName, controllerConstructorFn);
    };

    DOMProcessor.prototype.destroy = function() {
      this._ignoreHashRouteChanges();
      this._timedDOMObserver.destroy();
      return DOMProcessor._singletonInstance = void 0;
    };

    return DOMProcessor;

  })();

  ObliqueNS.DOMProcessor = DOMProcessor;

  this.Oblique = DOMProcessor;

}).call(this);
