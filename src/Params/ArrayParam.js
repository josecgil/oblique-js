// Generated by CoffeeScript 1.8.0
(function() {
  var ArrayParam, Param,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.ObliqueNS = this.ObliqueNS || {};

  Param = ObliqueNS.Param;

  ArrayParam = (function(_super) {
    __extends(ArrayParam, _super);

    function ArrayParam(name, values) {
      var value, _i, _len;
      this.name = name;
      ArrayParam.__super__.constructor.call(this, this.name);
      if (!this._isArray(values)) {
        throw new ObliqueNS.Error("Param constructor must be called with second param array");
      }
      this.values = [];
      for (_i = 0, _len = values.length; _i < _len; _i++) {
        value = values[_i];
        this.add(value);
      }
    }

    ArrayParam.prototype._isArray = function(value) {
      if (Object.prototype.toString.call(value) === '[object Array]') {
        return true;
      }
      return false;
    };

    ArrayParam.prototype.add = function(value) {
      if (!this._isString(value)) {
        throw new ObliqueNS.Error("Array param must be an string");
      }
      return this.values.push(value);
    };

    ArrayParam.prototype.remove = function(value) {
      var index;
      index = this.values.indexOf(value);
      if (index === -1) {
        return;
      }
      this.values.splice(index, 1);
      if (this.count() === 0) {
        return this.values = void 0;
      }
    };

    ArrayParam.prototype.isEmpty = function() {
      if (this.values === void 0) {
        return true;
      }
      if (this.count() === 0) {
        return true;
      }
      return false;
    };

    ArrayParam.prototype.getLocationHash = function() {
      var hash, value, _i, _len, _ref;
      if (this.count() === 0) {
        return "";
      }
      hash = "" + this.name + "=[";
      _ref = this.values;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        value = _ref[_i];
        hash += "" + value + ",";
      }
      hash = hash.substr(0, hash.length - 1);
      return hash += "]";
    };

    ArrayParam.prototype.count = function() {
      return this.values.length;
    };

    ArrayParam.createFrom = function(strHashParam) {
      var hashParam, trimmedValues, value, values, _i, _len;
      hashParam = Param.parse(strHashParam);
      value = hashParam.value.replace("[", "").replace("]", "");
      values = value.split(",");
      trimmedValues = [];
      for (_i = 0, _len = values.length; _i < _len; _i++) {
        value = values[_i];
        trimmedValues.push(value.trim());
      }
      return new ArrayParam(hashParam.name, trimmedValues);
    };

    return ArrayParam;

  })(ObliqueNS.Param);

  ObliqueNS.ArrayParam = ArrayParam;

}).call(this);
