// Generated by CoffeeScript 1.10.0
(function() {
  var Element;

  this.ObliqueNS = this.ObliqueNS || {};

  Element = (function() {
    function Element(DOMElement) {
      this._jQueryElement = jQuery(DOMElement);
    }

    Element.prototype.getDOMElement = function() {
      return this._jQueryElement.get(0);
    };

    Element.prototype.getjQueryElement = function() {
      return this._jQueryElement;
    };

    Element.prototype.isTag = function() {
      return Element._isTag(this._DOMElement);
    };

    Element.prototype.matchCSSExpression = function(cssExpression) {
      return this._jQueryElement.is(cssExpression);
    };

    Element.prototype.setFlag = function(flagName) {
      return this._jQueryElement.data(flagName, true);
    };

    Element.prototype.unsetFlag = function(flagName) {
      return this._jQueryElement.removeData(flagName);
    };

    Element.prototype.hasFlag = function(flagName) {
      return this._jQueryElement.data(flagName);
    };

    Element.prototype.hasAttribute = function(attributeName) {
      var attrValue;
      attrValue = this.getAttributeValue(attributeName);
      if (attrValue === void 0) {
        return false;
      }
      return true;
    };

    Element.prototype.getAttributeValue = function(attributeName) {
      return this._jQueryElement.attr(attributeName);
    };

    Element.prototype.eachDescendant = function(callbackOnDOMElement) {
      return Element._traverse(this.getDOMElement(), callbackOnDOMElement);
    };

    Element._isTag = function(DOMElement) {
      return DOMElement.nodeType === 1;
    };

    Element._traverse = function(parentElement, callbackOnDOMElement) {
      var child, currentElement, elementsToTraverse, results;
      elementsToTraverse = [];
      if (Element._isTag(parentElement)) {
        elementsToTraverse.push(parentElement);
      }
      callbackOnDOMElement(parentElement);
      results = [];
      while (elementsToTraverse.length > 0) {
        currentElement = elementsToTraverse.pop();
        results.push((function() {
          var i, len, ref, results1;
          ref = currentElement.children;
          results1 = [];
          for (i = 0, len = ref.length; i < len; i++) {
            child = ref[i];
            if (Element._isTag(child)) {
              elementsToTraverse.push(child);
              results1.push(callbackOnDOMElement(child));
            } else {
              results1.push(void 0);
            }
          }
          return results1;
        })());
      }
      return results;
    };

    Element.prototype.getHtml = function() {
      return this.getDOMElement().outerHTML;
    };

    return Element;

  })();

  ObliqueNS.Element = Element;

}).call(this);
